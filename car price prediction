# Car Price Prediction with Machine Learning

# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

# 2. Create Sample Car Dataset
data = {
    'Brand': ['Toyota', 'Honda', 'BMW', 'Mercedes', 'Ford', 'Hyundai', 'BMW', 'Toyota', 'Ford', 'Honda'],
    'Horsepower': [130, 115, 250, 300, 200, 110, 270, 150, 180, 125],
    'Mileage': [15, 18, 10, 8, 12, 20, 9, 14, 13, 16],
    'Age': [5, 3, 7, 2, 4, 6, 3, 4, 5, 2],
    'Price': [8000, 12000, 35000, 50000, 20000, 9000, 40000, 15000, 18000, 14000]
}

df = pd.DataFrame(data)
print("Sample Data:\n", df)

# 3. Data Preprocessing
# Convert categorical 'Brand' to numeric using Label Encoding
le = LabelEncoder()
df['Brand'] = le.fit_transform(df['Brand'])

# 4. Feature & Target Selection
X = df[['Brand', 'Horsepower', 'Mileage', 'Age']]
y = df['Price']

# 5. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 6. Train the Model
model = LinearRegression()
model.fit(X_train, y_train)

# 7. Predictions
y_pred = model.predict(X_test)

# 8. Model Evaluation
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("\nModel Performance:")
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("RÂ² Score:", r2)

# 9. Compare Predictions with Actual
pred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print("\nPrediction Results:\n", pred_df)

# 10. Visualization
plt.figure(figsize=(6, 4))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Car Prices")
plt.show()
